import{e as l,a$ as n,aK as i,ba as r,bb as C,bc as g,bd as f,p as b,aQ as v}from"./index-iGX-8HYq.js";function d(e){return i(()=>{const o=[],u={};if(e.value.background)if(r(e.value.background)){if(u.backgroundColor=e.value.background,!e.value.text&&C(e.value.background)){const t=g(e.value.background);if(t.a==null||t.a===1){const a=f(t);u.color=a,u.caretColor=a}}}else o.push(`bg-${e.value.background}`);return e.value.text&&(r(e.value.text)?(u.color=e.value.text,u.caretColor=e.value.text):o.push(`text-${e.value.text}`)),{colorClasses:o,colorStyles:u}})}function x(e,o){const u=l(()=>({text:n(e)?e.value:o?e[o]:null})),{colorClasses:t,colorStyles:a}=d(u);return{textColorClasses:t,textColorStyles:a}}function m(e,o){const u=l(()=>({background:n(e)?e.value:o?e[o]:null})),{colorClasses:t,colorStyles:a}=d(u);return{backgroundColorClasses:t,backgroundColorStyles:a}}const y=b({rounded:{type:[Boolean,Number,String],default:void 0},tile:Boolean},"rounded");function S(e){let o=arguments.length>1&&arguments[1]!==void 0?arguments[1]:v();return{roundedClasses:l(()=>{const t=n(e)?e.value:e.rounded,a=n(e)?e.value:e.tile,s=[];if(t===!0||t==="")s.push(`${o}--rounded`);else if(typeof t=="string"||t===0)for(const c of String(t).split(" "))s.push(`rounded-${c}`);else(a||t===!1)&&s.push("rounded-0");return s})}}export{S as a,x as b,d as c,y as m,m as u};
